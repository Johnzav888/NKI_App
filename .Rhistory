sig.level = error1InputP/100)$n)
#list(nn=nn, SS=SS)
}else if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(50, 130)
}else{
nn <- seq(30, 80)
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
}
list(nn=nn, SS=SS)
}
sss(prop1 = prop1, prop2 = prop2, Power1InputP = Power1InputP, error1InputP = error1InputP)
sss(prop1, prop2, error1InputP, Power1InputP)
sss(prop1, prop2, Power1InputP, error1InputP)
sample_sizPr <-
sss$[which(sss$res == min(sss$res[sss$res >= (Power1InputP)/100]))]
sample_sizPr <-
sss$nn[which(sss$res == min(sss$res[sss$res >= (Power1InputP)/100]))]
sss2 <- sss(prop1, prop2, Power1InputP, error1InputP)
sample_sizPr <-
sss2$nn[which(sss2$res == min(sss2$res[sss2$res >= (Power1InputP)/100]))]
sss$ss
sss2$SS
sss2 <- sss(0.1, 0.4, Power1InputP, error1InputP)
sss2$SS
sample_sizPr <-
sss2$nn[which(sss2$res == min(sss2$res[sss2$res >= (Power1InputP)/100]))]
sss2 <- sss(0.1, 0.8, Power1InputP, error1InputP)
sss2$SS
shiny::runApp()
runApp()
shiny::runApp()
sessionInfo()
ipak <- function( pkg ){  # Check if the packages are installed, and if not install them. Finally load them!
new.pkg <- pkg[!( pkg %in% installed.packages()[, "Package"] ) ]
if ( length( new.pkg ) )
install.packages(new.pkg, dependencies = TRUE )
for(package_name in pkg)
{library(package_name,character.only=TRUE, quietly = TRUE)}
}
packages <- c("xlsx", "nlme", "shiny", "ggplot2", "dplyr", "shinyjs", "shinycssloaders", "shinythemes", "plotly",
"samplesize","fBasics", "DT", "survival", "powerMediation", "stringi", "stringr", "statmod")
ipak(packages)
packages <- "rlang"
ipak(packages)
runApp()
runApp()
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2))))
prop1 =0.1
prop2 =0.3
Power1InputP = 80
error1InputP = 5
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2)))){print("s")}
prop1
prop2
prop2 = 0.5
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2)))){print("s")}
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2)))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else{
nn <- seq(30, 80)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = input$error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (input$Power1InputP)/100]))]
ss2 <- ss1
}else{
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,
sig.level = error1InputP/100)$n)
ss2 <- 10
}
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = input$error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (input$Power1InputP)/100]))]
ss2 <- 14
}
list(nn=nn, SS=SS)
}
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2)))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else{
nn <- seq(30, 80)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else{
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,
sig.level = error1InputP/100)$n)
ss2 <- 10
}
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- 14
}
list(nn=nn, SS=SS)
}
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))) &
(abs(prop1 - prop2) > 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2)))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(40, 130)
ss1 <- 11
}else{
nn <- seq(30, 80)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else{
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,
sig.level = error1InputP/100)$n)
ss2 <- 10
}
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- 14
}
list(SS=SS, ss=ss2)
}
}
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
next
}else if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else if(abs(prop1 - prop2) < 0.35 | isTRUE(all.equal(abs(prop1-prop2), 0.35))){
nn <- seq(20, 80)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- 15
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
next
}else if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
next
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
break
}else if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
break
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.4, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.2, prop2 = 0.4, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}else if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.16, prop2 = 0.45, Power1InputP = 80, error1InputP = 5)
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){}
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){print("s")}
prop1 = 0.16 ; prop2 = 0.45
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){print("s")}
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3)))
{print("ss")}
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){print("ss")}
}
ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else{
if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}else if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.16, prop2 = 0.45, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else{
if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}else{
if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
list(SS=SS, ss=ss2)
}
}
testtest(prop1 = 0.16, prop2 = 0.45, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else{
if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}else{
if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.16, prop2 = 0.45, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.16, prop2 = 0.46, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.16, prop2 = 0.47, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.59, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.35, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.4, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.9, Power1InputP = 80, error1InputP = 5)
runApp()
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
power.prop.test(p1 = 0.1, p2 = 0.3, power = Power1InputP/100,sig.level = error1InputP/100)$n
testtest(prop1 = 0.1, prop2 = 0.35, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else{
if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}else{
if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss1 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.1, prop2 = 0.35, Power1InputP = 80, error1InputP = 5)
testtest <- function(prop1, prop2, Power1InputP, error1InputP){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 10
}else{
if(abs(prop1 - prop2) < 0.45 | isTRUE(all.equal(abs(prop1-prop2), 0.45))){
nn <- seq(22, 100)
ss1 <- 11
}else{
nn <- seq(8, 45)
ss1 <- 12
}
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}else{
if(abs(prop1 - prop2) < 0.25 | isTRUE(all.equal(abs(prop1-prop2), 0.25))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = Power1InputP/100,sig.level = error1InputP/100)$n)
ss2 <- 13
}else{
nn <- seq(5, 60)
ss1 <- 14
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = error1InputP/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (Power1InputP)/100]))]
ss2 <- ss1
}
}
list(SS=SS, ss=ss2)
}
testtest(prop1 = 0.1, prop2 = 0.35, Power1InputP = 80, error1InputP = 5)
testtest(prop1 = 0.1, prop2 = 0.3, Power1InputP = 80, error1InputP = 5)
runApp()
runApp()
runApp()
