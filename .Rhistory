#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0, 1)
powr(0.1, 0.5)
powr(0.1, 0.2)
powr(0, 0.1)
powr(0.9, 1)
powr(0.1, 0.31)
powr(0.1, 0.4)
powr(0.5, 0.4)
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else if(abs(prop1 - prop2) <= 0.3){
A=2
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
#A = 1.5
}else{
#nn <- seq(30, 80)
#A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0.1, 0.5)
if(abs(prop1 - prop2) <= 0.3){
A=2
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
#A = 1.5
}else{
#nn <- seq(30, 80)
#A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else{
if(abs(prop1 - prop2) <= 0.3){
A=2
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
#A = 1.5
}else{
#nn <- seq(30, 80)
#A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else{
if(abs(prop1 - prop2) <= 0.3){
A=2
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
#A = 1.5
}else{
#nn <- seq(30, 80)
#A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
#nn <- seq(30, 80)
A = 2
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else{
if(abs(prop1 - prop2) <= 0.3){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
abs(prop1 - prop2) <= 0.3
prop1=0.1
prop2=0.2
prop1=0.1
abs(prop1 - prop2) <= 0.3
prop1=0.1
prop2=0.4
abs(prop1 - prop2) <= 0.3
abs(prop1 - prop2)
abs(0.1-0.4)
abs(0.1-0.4) == 0.3
numeric(abs(0.1-0.4)) == 0.3
as.numeric(abs(0.1-0.4)) == 0.3
double(abs(0.1-0.4)) == 0.3
double(abs(0.1-0.4)) == 0.3
abs(prop1 - 0.39) <= 0.3
powr(0.5, 0.4)
powr(0.64, 0.43)
powr(0.60, 0.40)
abs(0.1-0.4) == 0.3
abs(0.1-0.4)
0.3==0.3
type(abs(0.1-0.4))
class(abs(0.1-0.4))
typeof(abs(0.1-0.4))
typeof(0.3)
abs(0.1-0.4) == 0.3
all.equal(abs(0.1-0.4) == 0.3)
all.equal(abs(0.1-0.4),0.3)
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else{
if(abs(prop1 - prop2) < 0.3 | all.equal(abs(prop1-prop2), 0.3)){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else if(abs(prop1 - prop2) < 0.3 | all.equal(abs(prop1-prop2), 0.3)){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0, 1)
all.equal(abs(0.1-0.4), 0.3)
class(all.equal(abs(0.1-0.4), 0.3))
if(all.equal(abs(0.1-0.4), 0.3){print(2+2)}
if(all.equal(abs(0.1-0.4), 0.3)){print(2+2)}
if(all.equal(abs(0.1-0.4), 0.3) | abs(0.1-0.4) < 0.3){print(2+2)}
if(abs(0.1-0.4) < 0.3 | all.equal(abs(0.1-0.4), 0.3)){print(2+2)}
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else if(abs(prop1 - prop2) < 0.3 | all.equal(abs(prop1-prop2), 0.3)){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0.1, 0.5)
0.3
integer(0.3)
as.integer(0.3)
float(0.3)
floor(0.3)
3==3
2-1==3
format(2-1)
format(2-1,digits = 10)
sprintf("%.54f",1.1-0.2)
sprintf("%.54f",2-1)
sprintf("%.59f",2-1)
sprintf("%.590f",2-1)
2-1=1.0
2-1==1.0
0.3-0.2-==0.1
0.3-0.2==0.1
0.3-0.2==0.10
0.3-0.2==0.100
0.3-0.2==0.1000
sprintf("%.590f",0.3-0.2)
abs(a - b) < tolerance
tolerance
tolerance = .Machine$double.eps^0.5
abs(0.3 - 0.2) < tolerance
abs(0.3 - 0.2)-1 < tolerance
abs(0.3 - 0.2)-0.1 < tolerance
if(isTRUE(all.equal(0+0.15, .15))) { #code was getting sloppy &went to multiple lines
cat("i equals 0.15\n"
}
if(isTRUE(all.equal(0+0.15, .15))) { #code was getting sloppy &went to multiple lines
cat("i equals 0.15\n"}
if(isTRUE(all.equal(0+0.15, .15))){
cat("i equals 0.15\n"}
if(isTRUE(all.equal(0+0.15, .15))){
cat("i equals 0.15\n")}
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) <= 0.2){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0, 1)
powr(0, 0.1)
powr(0.9, 1)
powr(0.1, 0.4)
powr(0.60, 0.40)
powr(0.60, 0.39)
powr(0.60, 0.40)
powr(0.60, 0.40)
powr(0.60, 0.40)
powr(0.60, 0.80)
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) < 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2))){
#SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
#                             sig.level = 5/100)$n)
S = 1
}else if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((prop1 >= 0.4 & prop1 <= 0.6) | (prop2 >= 0.4 & prop2 <= 0.6)){
#nn <- seq(50, 130)
A = 1.5
}else{
#nn <- seq(30, 80)
A = 2
}
S = A
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
#nn <- seq(5, 65)
#res <- mapply(FUN = power.fisher.test,
#              MoreArgs = list(p1 = prop1, p2 = prop2,
#                              alpha = 5/100, nsim = 1000), nn, nn)
#SS <- nn[which(res == min(res[res >= (80)/100]))]
S = 3
}
return(S)
}
powr(0.60, 0.80)
powr(0.75, 0.95)
runApp()
sessionInfo()
library(lme4)
sessionInfo()
shiny::runApp()
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) < 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
sig.level = 5/100)$n)
#S = 1
}else if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(50, 130)
#A = 1.5
}else{
nn <- seq(30, 80)
#A = 2
}
#S = A
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = 5/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = 5/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (80)/100]))]
#S = 3
}
return(S)
}
powr(0.1, 0.2)
powr <- function(prop1, prop2){
if(abs(prop1 - prop2) < 0.2 | isTRUE(all.equal(abs(prop1-prop2), 0.2))){
SS <- ceiling(power.prop.test(p1 = prop1, p2 = prop2, power = 80/100,
sig.level = 5/100)$n)
#S = 1
}else if(abs(prop1 - prop2) < 0.3 | isTRUE(all.equal(abs(prop1-prop2), 0.3))){
if((prop1 > 0.4 & prop1 < 0.6) | (prop2 > 0.4 & prop2 < 0.6)){
nn <- seq(50, 130)
#A = 1.5
}else{
nn <- seq(30, 80)
#A = 2
}
#S = A
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = 5/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (80)/100]))]
}else{
nn <- seq(5, 65)
res <- mapply(FUN = power.fisher.test,
MoreArgs = list(p1 = prop1, p2 = prop2,
alpha = 5/100, nsim = 1000), nn, nn)
SS <- nn[which(res == min(res[res >= (80)/100]))]
#S = 3
}
return(SS)
}
powr(0.1, 0.2)
powr(0, 0.1)
powr(0.1, 0.31)
powr(0.1, 0.4)
powr(0.60, 0.4)
powr(0.65, 0.4)
runApp()
runApp()
ipak <- function( pkg ){  # Check if the packages are installed, and if not install them. Finally load them!
new.pkg <- pkg[!( pkg %in% installed.packages()[, "Package"] ) ]
if ( length( new.pkg ) )
install.packages(new.pkg, dependencies = TRUE )
sapply( pkg, library, character.only = TRUE, quietly = TRUE )
}
# usage
packages <- c("xlsx", "nlme", "shiny", "ggplot2", "dplyr", "shinyjs", "shinycssloaders", "shinythemes", "plotly",
"samplesize","fBasics", "DT", "survival", "powerMediation", "stringr", "statmod")
runApp()
shiny::runApp()
ipak <- function( pkg ){  # Check if the packages are installed, and if not install them. Finally load them!
new.pkg <- pkg[!( pkg %in% installed.packages()[, "Package"] ) ]
if ( length( new.pkg ) )
install.packages(new.pkg, dependencies = TRUE )
sapply( pkg, library, character.only = TRUE, quietly = TRUE )
}
# usage
packages <- c("xlsx", "nlme", "shiny", "ggplot2", "dplyr", "shinyjs", "shinycssloaders", "shinythemes", "plotly",
"samplesize","fBasics", "DT", "survival", "powerMediation", "stringr", "statmod")
ipak <- function( pkg ){  # Check if the packages are installed, and if not install them. Finally load them!
new.pkg <- pkg[!( pkg %in% installed.packages()[, "Package"] ) ]
if ( length( new.pkg ) )
install.packages(new.pkg, dependencies = TRUE )
#sapply( pkg, library, character.only = TRUE, quietly = TRUE )
for(package_name in pkg)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
# usage
packages <- c("xlsx", "nlme", "shiny", "ggplot2", "dplyr", "shinyjs", "shinycssloaders", "shinythemes", "plotly",
"samplesize","fBasics", "DT", "survival", "powerMediation", "stringr", "statmod")
ipak(packages)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
library(stringr)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
